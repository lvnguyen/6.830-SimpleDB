package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {
	
	private JoinPredicate m_joinPred;
	private DbIterator m_child1;
	private DbIterator m_child2;
    private Tuple m_child1_cache;
    
    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	m_joinPred = p;
    	m_child1 = child1;
    	m_child2 = child2;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	return TupleDesc.combine(m_child1.getTupleDesc(), m_child2.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        // some code goes here
    	m_child1.open();
    	m_child1_cache = m_child1.next();
    	m_child2.open();
    }

    public void close() {
        // some code goes here
    	m_child1.close();
    	m_child1_cache = null;
    	m_child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	m_child1.rewind();
    	m_child1_cache = m_child1.next();
    	m_child2.rewind();
    }    

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	while (m_child1_cache != null) {
    		// Keep looping until exhausting child2
    		while (m_child2.hasNext()) {
    			Tuple m_child2_cache = m_child2.next();
    			if (m_joinPred.filter(m_child1_cache, m_child2_cache)) {
    				// Combine two tuples. TODO: move it as a method in Tuple
    				TupleDesc combined = TupleDesc.combine(m_child1_cache.getTupleDesc(), m_child2_cache.getTupleDesc());
    				Tuple answer = new Tuple(combined);
    				for (int i = 0; i < m_child1_cache.getTupleDesc().numFields(); i++) {
    					answer.setField(i, m_child1_cache.getField(i));
    				}
    				for (int i = 0; i < m_child2_cache.getTupleDesc().numFields(); i++) {
    					answer.setField(m_child1_cache.getTupleDesc().numFields() + i, m_child2_cache.getField(i));
    				}
    				return answer;
    			}    			
    		}
    		// Advance to the next element in child1, and reset m_child2
    		if (m_child1.hasNext()) {
    			m_child1_cache = m_child1.next();
    			m_child2.rewind();
    		} else {
    			m_child1_cache = null;
    		}
    	}
        return null;
    }
}